INPUT = <IMPORT_STATEMENT>, <GENERAL_STATEMENT>;
IMPORT_STATEMENT = 'import', $RELATIVE_FILENAME, ['as', _DOTTED_ID], ';', /import/;
_DOTTED_ID = $ID, <'.'@_, $ID, /./>;
GENERAL_STATEMENT = METHOD_DEFINITION | CLASS_DEFINITION | KEY_STATEMENT | DEF_STATEMENT
					| (EXPRESSION, ';', /clear/);
METHOD_DEFINITION = PRIVACY_MODIFIER, CLASS_MODIFIER, FINAL_MODIFIER, TYPE_LIST, $ID, GENERIC_DECLARATION,
									PARAMETER_LIST, _THROWS, (METHOD_BODY, /define/) | (';', /declare/);
TYPE_LIST = TYPE, /typeListStart/, <',', TYPE>, /typeListEnd/;
PRIVACY_MODIFIER = 'private' | 'public' | 'local' | (#INTEGER@a, /private&a/) | /local/;
CLASS_MODIFIER = 'static' | /objective/;
FINAL_MODIFIER = 'final' | 'abstract' | /changing/;
GENERIC_DECLARATION = ['<', /genericStart/, _GENERIC_PARAM_DECLARATION, <',', _GENERIC_PARAM_DECLARATION>,
						/genericEnd/, '>'];
_GENERIC_PARAM_DECLARATION = $ID, EXTENSION, /genericParam/;
EXTENSION = ['extends', /extensionStart/, TYPE, <'|', TYPE>, /extensionEnd/];
PARAMETER_LIST = '(', /paramListStart/, [_PARAMETER, <',', _PARAMETER>], /paramListEnd/, ')';
_PARAMETER = FINAL_MODIFIER, TYPE, $ID, '...' | /single/, /parameter/;
_THROWS = 'throws', TYPE, /throw/;
METHOD_BODY = '{', /methodBodyStart/, <GENERAL_STATEMENT>, /methodBodyEnd/, '}';
CLASS_DEFINITION = PRIVACY_MODIFIER, FINAL_MODIFIER, $ID, GENERIC_DECLARATION, EXTENSION, CLASS_BODY, /classDef/;
CLASS_BODY = '{', /classBodyStart/, ENUM_LIST_DECLARATION, <GENERAL_STATEMENT>, /classBodyEnd/, '}';
ENUM_LIST_DECLARATION = ['enums', ':', ENUM_DECLARATION, <',', ENUM_DECLARATION>, ';', /endEnums/];
ENUM_DECLARATION = $ID, ('=', EXPRESSION, /enumValueDec/) | /enumDec/;
KEY_STATEMENT = _SIMPLE_KEY_STATEMENT | _RETURN | _SWITCH | _IF | _TRY | _DO | _WHILE | _FOR | _SECTION;
_SIMPLE_KEY_STATEMENT = _SIMPLE_KEY_WORD@a, EXPRESSION, /statement&a/ ';';
_SIMPLE_KEY_WORD = 'break' | 'continue' | 'assert' | 'throw';
_RETURN = 'return', /beginReturn/, EXPRESSION, <',', EXPRESSION>, /endReturn/, ';';
_SWITCH = 'switch', PARENED_EXPRESSION, _SWITCH_BODY; // no command needed since /endSwitch/ should count
PARENED_EXPRESSION = '(', EXPRESSION, ')';
_SWITCH_BODY = '{', /beginSwitch/, <_CASE_STATEMENT>, [_DEFAULT_STATEMENT], /endSwitch/, '}';
_CASE_STATEMENT = 'case', EXPRESSION, ':', /caseBodyStart/, <GENERAL_STATEMENT>, /caseEnd/;
_DEFAULT_STATEMENT = 'default', ':', /defaultBodyStart/, <GENERAL_STATEMENT>, /defaultEnd/;

//TODO

_IF = 'if', PARENED_EXPRESSION, METHOD_BODY, ['else', _IF | METHOD_BODY];
_TRY = 'try', METHOD_BODY, {'catch', '(', _PARAMETER, ')', METHOD_BODY}, ['finally', METHOD_BODY];
_DO = 'do', METHOD_BODY, 'while', PARENED_EXPRESSION, ';';
_WHILE = 'while', PARENED_EXPRESSION, METHOD_BODY;
_FOR = 'for', '(', DEF_STATEMENT | EXPRESSION, ';', EXPRESSION, ';', EXPRESSION, ')', METHOD_BODY;
_SECTION = 'section, METHOD_BODY;
DEF_STATEMENT = PRIVACY_MODIFIER, CLASS_MODIFIER, FINAL_MODIFIER, TYPE, $ID, <',', $ID>, '=', EXPRESSION, ';';
TYPE = _NON_ARRAY_TYPE, <'[', ']'>;
_NON_ARRAY_TYPE = _NON_GENERIC_TYPE, _GENERIC_TYPE_MODIFIER;
_GENERIC_TYPE_MODIFIER = ['<', _UNKNOWN_TYPE, <',', _UNKNOWN_TYPE>, '>'];
_UNKNOWN_TYPE = TYPE | '?';
_NON_GENERIC_TYPE = _DOTTED_ID | _EXPRESSION_TYPE;
_EXPRESSION_TYPE = '<:', EXPRESSION, ':>';
_NUMBER = (#INTEGER, ['b' | 'i' | 'l']) | (#DECIMAL, ['f', 'd']);
EXPRESSION = TERNARY_EXPRESSION_LIST, [_ASSINGMENT_OPERATOR, EXPRESSION];
_ASSIGNMENT_OPERATOR = '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' | '>>>=';
TERNARY_EXPRESSION_LIST = TERNARY_EXPRESSION, <',', TERNARY_EXPRESSION>;
TERNARY_EXPRESSION = COND_OR_EXPRESSION, ['?', TERNARY_EXPRESSION, ':', TERNARY_EXPRESSION];
COND_OR_EXPRESSION = COND_AND_EXPRESSION, <'||', COND_AND_EXPRESSION>;
COND_AND_EXPRESSION = BIT_OR_EXPRESSION, <'&&', BIT_OR_EXPRESSION>;
BIT_OR_EXPRESSION = BIT_XOR_EXPRESSION, <'|', BIT_XOR_EXPRESSION>;
BIT_XOR_EXPRESSION = BIT_AND_EXPRESSION, <'^', BIT_AND_EXPRESSION>;
BIT_AND_EXPRESSION = EQUALITY_EXPRESSION, <'&', EQUALITY_EXPRESSION>;
EQUALITY_EXPRESSION = RELATIONAL_EXPRESSION, <_EQUALITY_OPERATOR, RELATIONAL_EXPRESSION>;
_EQUALITY_OPERATOR = '==' | '!=';
RELATIONAL_EXPRESSION = SHIFT_EXPRESSION, <_RELATIONAL_OPERATOR, _RELATIONAL_COMBINATION_EXPRESSION>;
_RELATIONAL_OPERATOR = '<' | '<=' | '>' | '>=' | 'instanceof';
_RELATIONAL_COMBINATION_EXPRESSION = SHIFT_EXPRESSION | ('(', EXPRESSION, <',', EXPRESSION>, ')');
SHIFT_EXPRESSION = ADDITIVE_EXPRESSION, <_SHIFT_OPERATOR, ADDITIVE_EXPRESSION>;
_SHIFT_OPERATOR = '<<' | '>>' | '>>>';
ADDITIVE_EXPRESSION = MULTIPLICATIVE_EXPRESSION, <_ADDITIVE_OPERATOR, MULTIPLICATIVE_EXPRESSION>;
_ADDITIVE_OPERATOR = '+' | '-';
MULTIPLICATIVE_EXPRESSION = CAST_EXPRESSION, <_MULTIPLICATIVE_OPERATOR, CAST_EXPRESSION>;
_MULTIPLICATIVE_OPERATOR = '*' | '/' | '%';
CAST_EXPRESSION = <'(', TYPE, ')'>, PRE_EXPRESSION;
PRE_EXPRESSION = <_PRE_OPERATOR>, POST_EXPRESSION;
_PRE_OPERATOR = '++' | '--' | '+' | '-' | '!' | '~';
POST_EXPRESSION = INNER_EXPRESSION, <_POST_OPERATION>;
_POST_OPERATION = _ARRAY_ACCESS | _MEMBER_ACCESS | _METHOD_CALL | '++' | '--';
_ARRAY_ACCESS = '[', ['*'], _ARRAY_ACCESS_INTERVAL, <',', _ARRAY_ACCESS_INTERVAL>, ']';
_ARRAY_ACCESS_INTERVAL = [EXPRESSION], [':', [EXPRESSION]], [':', [EXPRESSION]];
_MEMBER_ACCESS = '.', $ID;
_METHOD_CALL = [_GENERIC_TYPE_MODIFIER], _ARGUMENT_LIST;
_ARGUMENT_LIST = '(', [EXPRESSION, <',', EXPRESSION], ')';
INNER_EXPRESSION = PARENED_EXPRESSION | $ID | NEW_OBJECT;
NEW_OBJECT = 'new', TYPE, PARAMETER_LIST;